let vsSource =
    [
            'precision mediump float;',
            'attribute vec3 vertPositions;',
            'attribute vec3 vertColor;',
            'attribute vec3 a_normal;',
            'varying vec3 fragColor;',
            'varying vec3 v_normal;',
            '',
            'uniform vec3 uColors;',
            'uniform mat4 mWorld;',
            'uniform mat4 mView;',
            'uniform mat4 mProj;',
            'uniform vec3 u_lightWorldPosition;',
            'uniform vec3 u_viewWorldPosition;',
            'varying vec3 v_surfaceToLight;',
            'varying vec3 v_surfaceToView;',
            '',
            'void main()',
            '{',
            '   fragColor = uColors;',
            '   vec3 surfaceWorldPosition = (mWorld * vec4(vertPositions, 1.0)).xyz;',
            '   v_surfaceToLight = u_lightWorldPosition - surfaceWorldPosition;',
            '   v_normal = mat3(mWorld) * a_normal;',
            '   v_surfaceToView = normalize(u_viewWorldPosition - surfaceWorldPosition);',
            '   gl_Position = mProj * mView * mWorld * vec4(vertPositions, 1.0);',
            '}',
    ].join('\n');

let fsSource =
    [
            'precision mediump float;',
            '',
            'varying vec3 fragColor;',
            'varying vec3 v_normal;',
            'varying vec3 v_surfaceToLight;',
            'varying vec3 v_surfaceToView;',
            '',
            'uniform float u_shininess;',
            'uniform float u_lightPower;',
            'uniform vec3 u_lightColor;',
            'uniform vec3 u_specularColor;',
            '',
            'void main()',
            '{',
            'vec3 normal = normalize(v_normal);',
            'vec3 surfaceToLightDirection = normalize(v_surfaceToLight);',
            'vec3 surfaceToViewDirection = normalize(v_surfaceToView);',
            'vec3 halfVector = normalize(surfaceToLightDirection + surfaceToViewDirection);',
            'float light = dot(normal, surfaceToLightDirection);',
            'light *= u_lightPower;',
            'float specular = 0.0;',
            'if (light > 0.0) {',
            '       specular = pow(dot(normal, halfVector), u_shininess);',
            '}',
            'gl_FragColor = vec4(fragColor, 1.0);',
            'gl_FragColor.rgb *= light * u_lightColor;',
            'gl_FragColor.rgb += specular * u_specularColor;',
            '',
            '}',
    ].join('\n');